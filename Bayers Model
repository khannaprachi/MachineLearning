{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/khannaprachi/MachineLearning/blob/main/Bayers%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "017db17a",
      "metadata": {
        "id": "017db17a",
        "outputId": "4a950f34-c81c-43f8-8f8c-a14fd39d452b"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-2-4faf4dae60a9>:21: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
            "  bureaucreditdata = activecredits.groupby(['SK_ID_CURR'], as_index=False)['AMT_CREDIT_SUM','AMT_CREDIT_SUM_DEBT','AMT_CREDIT_SUM_OVERDUE','DAYS_CREDIT','CREDIT_DAY_OVERDUE','AMT_ANNUITY'].sum()\n",
            "<ipython-input-2-4faf4dae60a9>:23: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
            "  creditcarddata = creditcardbalance.groupby(['SK_ID_CURR'], as_index=False)['AMT_BALANCE','AMT_INST_MIN_REGULARITY'].sum()\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SK_ID_CURR</th>\n",
              "      <th>TARGET</th>\n",
              "      <th>NAME_CONTRACT_TYPE</th>\n",
              "      <th>CODE_GENDER</th>\n",
              "      <th>FLAG_OWN_CAR</th>\n",
              "      <th>FLAG_OWN_REALTY</th>\n",
              "      <th>CNT_CHILDREN</th>\n",
              "      <th>AMT_INCOME_TOTAL</th>\n",
              "      <th>AMT_CREDIT</th>\n",
              "      <th>AMT_ANNUITY_x</th>\n",
              "      <th>...</th>\n",
              "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
              "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
              "      <th>AMT_CREDIT_SUM</th>\n",
              "      <th>AMT_CREDIT_SUM_DEBT</th>\n",
              "      <th>AMT_CREDIT_SUM_OVERDUE</th>\n",
              "      <th>DAYS_CREDIT</th>\n",
              "      <th>CREDIT_DAY_OVERDUE</th>\n",
              "      <th>AMT_ANNUITY_y</th>\n",
              "      <th>AMT_BALANCE</th>\n",
              "      <th>AMT_INST_MIN_REGULARITY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100002</td>\n",
              "      <td>1</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>M</td>\n",
              "      <td>N</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>202500.0</td>\n",
              "      <td>406597.5</td>\n",
              "      <td>24700.5</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>481988.565</td>\n",
              "      <td>245781.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1145.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100003</td>\n",
              "      <td>0</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>F</td>\n",
              "      <td>N</td>\n",
              "      <td>N</td>\n",
              "      <td>0</td>\n",
              "      <td>270000.0</td>\n",
              "      <td>1293502.5</td>\n",
              "      <td>35698.5</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>810000.000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-606.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100004</td>\n",
              "      <td>0</td>\n",
              "      <td>Revolving loans</td>\n",
              "      <td>M</td>\n",
              "      <td>Y</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>67500.0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>6750.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100006</td>\n",
              "      <td>0</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>F</td>\n",
              "      <td>N</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>312682.5</td>\n",
              "      <td>29686.5</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100007</td>\n",
              "      <td>0</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>M</td>\n",
              "      <td>N</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>121500.0</td>\n",
              "      <td>513000.0</td>\n",
              "      <td>21865.5</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307506</th>\n",
              "      <td>456251</td>\n",
              "      <td>0</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>M</td>\n",
              "      <td>N</td>\n",
              "      <td>N</td>\n",
              "      <td>0</td>\n",
              "      <td>157500.0</td>\n",
              "      <td>254700.0</td>\n",
              "      <td>27558.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307507</th>\n",
              "      <td>456252</td>\n",
              "      <td>0</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>F</td>\n",
              "      <td>N</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>72000.0</td>\n",
              "      <td>269550.0</td>\n",
              "      <td>12001.5</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307508</th>\n",
              "      <td>456253</td>\n",
              "      <td>0</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>F</td>\n",
              "      <td>N</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>153000.0</td>\n",
              "      <td>677664.0</td>\n",
              "      <td>29979.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2610000.000</td>\n",
              "      <td>1795833.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1632.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>58369.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307509</th>\n",
              "      <td>456254</td>\n",
              "      <td>1</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>F</td>\n",
              "      <td>N</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>171000.0</td>\n",
              "      <td>370107.0</td>\n",
              "      <td>20205.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307510</th>\n",
              "      <td>456255</td>\n",
              "      <td>0</td>\n",
              "      <td>Cash loans</td>\n",
              "      <td>F</td>\n",
              "      <td>N</td>\n",
              "      <td>N</td>\n",
              "      <td>0</td>\n",
              "      <td>157500.0</td>\n",
              "      <td>675000.0</td>\n",
              "      <td>49117.5</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2339532.000</td>\n",
              "      <td>1534913.01</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2785.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3244.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>307511 rows × 130 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        SK_ID_CURR  TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n",
              "0           100002       1         Cash loans           M            N   \n",
              "1           100003       0         Cash loans           F            N   \n",
              "2           100004       0    Revolving loans           M            Y   \n",
              "3           100006       0         Cash loans           F            N   \n",
              "4           100007       0         Cash loans           M            N   \n",
              "...            ...     ...                ...         ...          ...   \n",
              "307506      456251       0         Cash loans           M            N   \n",
              "307507      456252       0         Cash loans           F            N   \n",
              "307508      456253       0         Cash loans           F            N   \n",
              "307509      456254       1         Cash loans           F            N   \n",
              "307510      456255       0         Cash loans           F            N   \n",
              "\n",
              "       FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  \\\n",
              "0                    Y             0          202500.0    406597.5   \n",
              "1                    N             0          270000.0   1293502.5   \n",
              "2                    Y             0           67500.0    135000.0   \n",
              "3                    Y             0          135000.0    312682.5   \n",
              "4                    Y             0          121500.0    513000.0   \n",
              "...                ...           ...               ...         ...   \n",
              "307506               N             0          157500.0    254700.0   \n",
              "307507               Y             0           72000.0    269550.0   \n",
              "307508               Y             0          153000.0    677664.0   \n",
              "307509               Y             0          171000.0    370107.0   \n",
              "307510               N             0          157500.0    675000.0   \n",
              "\n",
              "        AMT_ANNUITY_x  ...  AMT_REQ_CREDIT_BUREAU_QRT  \\\n",
              "0             24700.5  ...                        0.0   \n",
              "1             35698.5  ...                        0.0   \n",
              "2              6750.0  ...                        0.0   \n",
              "3             29686.5  ...                        NaN   \n",
              "4             21865.5  ...                        0.0   \n",
              "...               ...  ...                        ...   \n",
              "307506        27558.0  ...                        NaN   \n",
              "307507        12001.5  ...                        NaN   \n",
              "307508        29979.0  ...                        0.0   \n",
              "307509        20205.0  ...                        0.0   \n",
              "307510        49117.5  ...                        0.0   \n",
              "\n",
              "       AMT_REQ_CREDIT_BUREAU_YEAR AMT_CREDIT_SUM AMT_CREDIT_SUM_DEBT  \\\n",
              "0                             1.0     481988.565           245781.00   \n",
              "1                             0.0     810000.000                0.00   \n",
              "2                             0.0            NaN                 NaN   \n",
              "3                             NaN            NaN                 NaN   \n",
              "4                             0.0            NaN                 NaN   \n",
              "...                           ...            ...                 ...   \n",
              "307506                        NaN            NaN                 NaN   \n",
              "307507                        NaN            NaN                 NaN   \n",
              "307508                        1.0    2610000.000          1795833.00   \n",
              "307509                        0.0            NaN                 NaN   \n",
              "307510                        1.0    2339532.000          1534913.01   \n",
              "\n",
              "       AMT_CREDIT_SUM_OVERDUE DAYS_CREDIT  CREDIT_DAY_OVERDUE  AMT_ANNUITY_y  \\\n",
              "0                         0.0     -1145.0                 0.0            0.0   \n",
              "1                         0.0      -606.0                 0.0            0.0   \n",
              "2                         NaN         NaN                 NaN            NaN   \n",
              "3                         NaN         NaN                 NaN            NaN   \n",
              "4                         NaN         NaN                 NaN            NaN   \n",
              "...                       ...         ...                 ...            ...   \n",
              "307506                    NaN         NaN                 NaN            NaN   \n",
              "307507                    NaN         NaN                 NaN            NaN   \n",
              "307508                    0.0     -1632.0                 0.0        58369.5   \n",
              "307509                    NaN         NaN                 NaN            NaN   \n",
              "307510                    0.0     -2785.0                 0.0         3244.5   \n",
              "\n",
              "        AMT_BALANCE  AMT_INST_MIN_REGULARITY  \n",
              "0               NaN                      NaN  \n",
              "1               NaN                      NaN  \n",
              "2               NaN                      NaN  \n",
              "3               0.0                      0.0  \n",
              "4               NaN                      NaN  \n",
              "...             ...                      ...  \n",
              "307506          NaN                      NaN  \n",
              "307507          NaN                      NaN  \n",
              "307508          NaN                      NaN  \n",
              "307509          NaN                      NaN  \n",
              "307510          NaN                      NaN  \n",
              "\n",
              "[307511 rows x 130 columns]"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import seaborn as sb\n",
        "from sklearn import decomposition\n",
        "from sklearn import datasets\n",
        "from sklearn.preprocessing import scale\n",
        "from sklearn.preprocessing import StandardScaler, normalize\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler, QuantileTransformer\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "\n",
        "# Bureau, Credit and Application train data grouped by SK_ID_CURR\n",
        "# Performing left joint of selective columns from Bureau(Active credits) and Credit Card data with Application train data\n",
        "\n",
        "bureaudata = pd.read_csv(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\bureau.csv\")\n",
        "applicationdata = pd.read_csv(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\application_train.csv\")\n",
        "creditcardbalance = pd.read_csv(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\credit_card_balance.csv\")\n",
        "activecredits=bureaudata.groupby('CREDIT_ACTIVE').get_group('Active')\n",
        "#bureaucreditdata = activecredits.groupby(['SK_ID_CURR'], as_index=False)['AMT_CREDIT_SUM','AMT_CREDIT_SUM_DEBT','AMT_CREDIT_SUM_OVERDUE','CREDIT_DAY_OVERDUE','AMT_ANNUITY'].sum()\n",
        "bureaucreditdata = activecredits.groupby(['SK_ID_CURR'], as_index=False)['AMT_CREDIT_SUM','AMT_CREDIT_SUM_DEBT','AMT_CREDIT_SUM_OVERDUE','DAYS_CREDIT','CREDIT_DAY_OVERDUE','AMT_ANNUITY'].sum()\n",
        "app_bureau_data=pd.merge(applicationdata,bureaucreditdata,on='SK_ID_CURR',how='left')\n",
        "creditcarddata = creditcardbalance.groupby(['SK_ID_CURR'], as_index=False)['AMT_BALANCE','AMT_INST_MIN_REGULARITY'].sum()\n",
        "app_bureau_credit_data = pd.merge(app_bureau_data,creditcarddata,on='SK_ID_CURR',how='left')\n",
        "app_bureau_credit_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "10c0222f",
      "metadata": {
        "id": "10c0222f",
        "outputId": "5db96002-6d92-45b1-8551-fe0b9209e2ef"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SK_ID_CURR</th>\n",
              "      <th>TARGET</th>\n",
              "      <th>CNT_CHILDREN</th>\n",
              "      <th>AMT_INCOME_TOTAL</th>\n",
              "      <th>AMT_CREDIT</th>\n",
              "      <th>AMT_ANNUITY_x</th>\n",
              "      <th>AMT_GOODS_PRICE</th>\n",
              "      <th>REGION_POPULATION_RELATIVE</th>\n",
              "      <th>DAYS_BIRTH</th>\n",
              "      <th>DAYS_EMPLOYED</th>\n",
              "      <th>...</th>\n",
              "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
              "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
              "      <th>AMT_CREDIT_SUM</th>\n",
              "      <th>AMT_CREDIT_SUM_DEBT</th>\n",
              "      <th>AMT_CREDIT_SUM_OVERDUE</th>\n",
              "      <th>DAYS_CREDIT</th>\n",
              "      <th>CREDIT_DAY_OVERDUE</th>\n",
              "      <th>AMT_ANNUITY_y</th>\n",
              "      <th>AMT_BALANCE</th>\n",
              "      <th>AMT_INST_MIN_REGULARITY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100002</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>202500.0</td>\n",
              "      <td>406597.5</td>\n",
              "      <td>24700.5</td>\n",
              "      <td>351000.0</td>\n",
              "      <td>0.018801</td>\n",
              "      <td>-9461</td>\n",
              "      <td>-637</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>481988.565</td>\n",
              "      <td>245781.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1145.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100003</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>270000.0</td>\n",
              "      <td>1293502.5</td>\n",
              "      <td>35698.5</td>\n",
              "      <td>1129500.0</td>\n",
              "      <td>0.003541</td>\n",
              "      <td>-16765</td>\n",
              "      <td>-1188</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>810000.000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-606.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100004</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>67500.0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>6750.0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>0.010032</td>\n",
              "      <td>-19046</td>\n",
              "      <td>-225</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100006</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>312682.5</td>\n",
              "      <td>29686.5</td>\n",
              "      <td>297000.0</td>\n",
              "      <td>0.008019</td>\n",
              "      <td>-19005</td>\n",
              "      <td>-3039</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100007</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>121500.0</td>\n",
              "      <td>513000.0</td>\n",
              "      <td>21865.5</td>\n",
              "      <td>513000.0</td>\n",
              "      <td>0.028663</td>\n",
              "      <td>-19932</td>\n",
              "      <td>-3038</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307506</th>\n",
              "      <td>456251</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>157500.0</td>\n",
              "      <td>254700.0</td>\n",
              "      <td>27558.0</td>\n",
              "      <td>225000.0</td>\n",
              "      <td>0.032561</td>\n",
              "      <td>-9327</td>\n",
              "      <td>-236</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307507</th>\n",
              "      <td>456252</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>72000.0</td>\n",
              "      <td>269550.0</td>\n",
              "      <td>12001.5</td>\n",
              "      <td>225000.0</td>\n",
              "      <td>0.025164</td>\n",
              "      <td>-20775</td>\n",
              "      <td>365243</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307508</th>\n",
              "      <td>456253</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>153000.0</td>\n",
              "      <td>677664.0</td>\n",
              "      <td>29979.0</td>\n",
              "      <td>585000.0</td>\n",
              "      <td>0.005002</td>\n",
              "      <td>-14966</td>\n",
              "      <td>-7921</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2610000.000</td>\n",
              "      <td>1795833.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1632.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>58369.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307509</th>\n",
              "      <td>456254</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>171000.0</td>\n",
              "      <td>370107.0</td>\n",
              "      <td>20205.0</td>\n",
              "      <td>319500.0</td>\n",
              "      <td>0.005313</td>\n",
              "      <td>-11961</td>\n",
              "      <td>-4786</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307510</th>\n",
              "      <td>456255</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>157500.0</td>\n",
              "      <td>675000.0</td>\n",
              "      <td>49117.5</td>\n",
              "      <td>675000.0</td>\n",
              "      <td>0.046220</td>\n",
              "      <td>-16856</td>\n",
              "      <td>-1262</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2339532.000</td>\n",
              "      <td>1534913.01</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2785.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3244.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>307511 rows × 114 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        SK_ID_CURR  TARGET  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  \\\n",
              "0           100002       1             0          202500.0    406597.5   \n",
              "1           100003       0             0          270000.0   1293502.5   \n",
              "2           100004       0             0           67500.0    135000.0   \n",
              "3           100006       0             0          135000.0    312682.5   \n",
              "4           100007       0             0          121500.0    513000.0   \n",
              "...            ...     ...           ...               ...         ...   \n",
              "307506      456251       0             0          157500.0    254700.0   \n",
              "307507      456252       0             0           72000.0    269550.0   \n",
              "307508      456253       0             0          153000.0    677664.0   \n",
              "307509      456254       1             0          171000.0    370107.0   \n",
              "307510      456255       0             0          157500.0    675000.0   \n",
              "\n",
              "        AMT_ANNUITY_x  AMT_GOODS_PRICE  REGION_POPULATION_RELATIVE  \\\n",
              "0             24700.5         351000.0                    0.018801   \n",
              "1             35698.5        1129500.0                    0.003541   \n",
              "2              6750.0         135000.0                    0.010032   \n",
              "3             29686.5         297000.0                    0.008019   \n",
              "4             21865.5         513000.0                    0.028663   \n",
              "...               ...              ...                         ...   \n",
              "307506        27558.0         225000.0                    0.032561   \n",
              "307507        12001.5         225000.0                    0.025164   \n",
              "307508        29979.0         585000.0                    0.005002   \n",
              "307509        20205.0         319500.0                    0.005313   \n",
              "307510        49117.5         675000.0                    0.046220   \n",
              "\n",
              "        DAYS_BIRTH  DAYS_EMPLOYED  ...  AMT_REQ_CREDIT_BUREAU_QRT  \\\n",
              "0            -9461           -637  ...                        0.0   \n",
              "1           -16765          -1188  ...                        0.0   \n",
              "2           -19046           -225  ...                        0.0   \n",
              "3           -19005          -3039  ...                        NaN   \n",
              "4           -19932          -3038  ...                        0.0   \n",
              "...            ...            ...  ...                        ...   \n",
              "307506       -9327           -236  ...                        NaN   \n",
              "307507      -20775         365243  ...                        NaN   \n",
              "307508      -14966          -7921  ...                        0.0   \n",
              "307509      -11961          -4786  ...                        0.0   \n",
              "307510      -16856          -1262  ...                        0.0   \n",
              "\n",
              "        AMT_REQ_CREDIT_BUREAU_YEAR  AMT_CREDIT_SUM  AMT_CREDIT_SUM_DEBT  \\\n",
              "0                              1.0      481988.565            245781.00   \n",
              "1                              0.0      810000.000                 0.00   \n",
              "2                              0.0             NaN                  NaN   \n",
              "3                              NaN             NaN                  NaN   \n",
              "4                              0.0             NaN                  NaN   \n",
              "...                            ...             ...                  ...   \n",
              "307506                         NaN             NaN                  NaN   \n",
              "307507                         NaN             NaN                  NaN   \n",
              "307508                         1.0     2610000.000           1795833.00   \n",
              "307509                         0.0             NaN                  NaN   \n",
              "307510                         1.0     2339532.000           1534913.01   \n",
              "\n",
              "        AMT_CREDIT_SUM_OVERDUE  DAYS_CREDIT  CREDIT_DAY_OVERDUE  \\\n",
              "0                          0.0      -1145.0                 0.0   \n",
              "1                          0.0       -606.0                 0.0   \n",
              "2                          NaN          NaN                 NaN   \n",
              "3                          NaN          NaN                 NaN   \n",
              "4                          NaN          NaN                 NaN   \n",
              "...                        ...          ...                 ...   \n",
              "307506                     NaN          NaN                 NaN   \n",
              "307507                     NaN          NaN                 NaN   \n",
              "307508                     0.0      -1632.0                 0.0   \n",
              "307509                     NaN          NaN                 NaN   \n",
              "307510                     0.0      -2785.0                 0.0   \n",
              "\n",
              "        AMT_ANNUITY_y  AMT_BALANCE  AMT_INST_MIN_REGULARITY  \n",
              "0                 0.0          NaN                      NaN  \n",
              "1                 0.0          NaN                      NaN  \n",
              "2                 NaN          NaN                      NaN  \n",
              "3                 NaN          0.0                      0.0  \n",
              "4                 NaN          NaN                      NaN  \n",
              "...               ...          ...                      ...  \n",
              "307506            NaN          NaN                      NaN  \n",
              "307507            NaN          NaN                      NaN  \n",
              "307508        58369.5          NaN                      NaN  \n",
              "307509            NaN          NaN                      NaN  \n",
              "307510         3244.5          NaN                      NaN  \n",
              "\n",
              "[307511 rows x 114 columns]"
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Dropping all catagorical variables\n",
        "app_bureau_credit_data = app_bureau_credit_data.select_dtypes(exclude=[\"object\"])\n",
        "app_bureau_credit_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2dd1cbd8",
      "metadata": {
        "id": "2dd1cbd8",
        "outputId": "09c01cc4-f1c1-4362-cf84-3fe61cd3892f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "SK_ID_CURR                      0\n",
              "TARGET                          0\n",
              "CNT_CHILDREN                    0\n",
              "AMT_INCOME_TOTAL                0\n",
              "AMT_CREDIT                      0\n",
              "                            ...  \n",
              "DAYS_CREDIT                 90361\n",
              "CREDIT_DAY_OVERDUE          90361\n",
              "AMT_ANNUITY_y               90361\n",
              "AMT_BALANCE                220606\n",
              "AMT_INST_MIN_REGULARITY    220606\n",
              "Length: 114, dtype: int64"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Checking null values\n",
        "app_bureau_credit_data.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c2ca1a06",
      "metadata": {
        "id": "c2ca1a06"
      },
      "outputs": [],
      "source": [
        "# Fill NAN with 0 and save the dataframe to csv file\n",
        "\n",
        "app_bureau_credit_data.fillna(value = 0, inplace = True)\n",
        "app_bureau_credit_data.head()\n",
        "app_bureau_credit_data.to_csv('C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/app_bureau_credit_data.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3a0118aa",
      "metadata": {
        "id": "3a0118aa"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import seaborn as sb\n",
        "from sklearn import decomposition\n",
        "from sklearn import datasets\n",
        "from sklearn.preprocessing import scale\n",
        "from sklearn.preprocessing import StandardScaler, normalize\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler, QuantileTransformer\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "\n",
        "#create new dataframe from saves csv data from previous step\n",
        "Combinedfile = pd.read_csv(\"C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/app_bureau_credit_data.csv\")\n",
        "#app_bureau_credit_selected=app_bureau_credit_data.iloc[:,[3,4,5,6,7,8, 9, 10,11,12, 17, 18, 19, 20, 95, 29]]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d5778d45",
      "metadata": {
        "id": "d5778d45",
        "outputId": "5b931d0f-c321-4924-8b01-bccdf217a157"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(307511, 112)\n",
            "(307511,)\n",
            "[[      0  270000  326439 ...       0       0       0]\n",
            " [      1  225000 1125000 ...       0       0       0]\n",
            " [      0  270000  912240 ...       0       0       0]\n",
            " ...\n",
            " [      1  112500  270000 ...       0       0       0]\n",
            " [      3  202500  204858 ...       0       0       0]\n",
            " [      2   81000  547344 ...       0 2543225   93694]]\n",
            "[[      0  117000  417024 ...   10188       0       0]\n",
            " [      0  450000  640080 ...       0 9645936  469118]\n",
            " [      0  450000  900000 ...       0       0       0]\n",
            " ...\n",
            " [      0  270000  497520 ...       0   93186   11811]\n",
            " [      0   67500  152820 ...       0       0       0]\n",
            " [      0   90000 1140156 ...       0       0       0]]\n",
            "[0 0 1 ... 1 1 0]\n",
            "[1 0 0 ... 0 0 0]\n"
          ]
        }
      ],
      "source": [
        "#Select Value of X and Y variables. Assign Target value to Y and rest all features are assigned to X except SKU number\n",
        "from sklearn.model_selection import train_test_split\n",
        "Y = Combinedfile.iloc[:,2].values.astype(int)\n",
        "X = Combinedfile.iloc[:,3:].values.astype(int)\n",
        "print(X.shape)\n",
        "print(Y.shape)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "print(X_train)\n",
        "print(X_test)\n",
        "print(y_train)\n",
        "print(y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "31e0fb47",
      "metadata": {
        "id": "31e0fb47",
        "outputId": "5d8c7598-4312-4b87-f882-0ac110df9262"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.8474068526493166\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\khann\\anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Use DecisionTreeClassifier to predict the accuracy of model\n",
        "\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "clf = DecisionTreeClassifier(random_state = 0)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "y_train=y_train.reshape(-1,1)\n",
        "#y_test=y_test.reshape(-1,1)\n",
        "clf.fit(X_train,y_train)\n",
        "y_pred=clf.predict(X_test)\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_pred))\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "plot_confusion_matrix(clf, X_test, y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1a44133c",
      "metadata": {
        "id": "1a44133c",
        "outputId": "38ec0369-7f0e-41b6-a7f1-f0e6ba50fa42"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With DecisionTreeClassifier and using all numeric features the AUC value is 0.524\n",
        "\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1c68feff",
      "metadata": {
        "id": "1c68feff",
        "outputId": "73cfc487-b26c-4e54-89f6-63d44dd874ca"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\khann\\anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_gb.py:570: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of decision tree: 0.920219946984105\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\khann\\anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Use GradientBoostingClassifier to predict the accuracy of model\n",
        "\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "#train with gradient boosting algorithm\n",
        "gb = GradientBoostingClassifier(random_state = 0)\n",
        "#X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "gb.fit(X_train,y_train)\n",
        "gb.score(X_train,y_train).round(2)\n",
        "y_gb_pred=gb.predict(X_test)\n",
        "print(\"Accuracy of decision tree:\",metrics.accuracy_score(y_test, y_gb_pred))\n",
        "plot_confusion_matrix(gb, X_test, y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2b81f34b",
      "metadata": {
        "id": "2b81f34b",
        "outputId": "212506bf-ed0c-4888-a459-08af7b25a428"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GradientBoostingClassifier and using all numeric features the AUC value is 0.500\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_gb_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_gb_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fa78cbb2",
      "metadata": {
        "id": "fa78cbb2",
        "outputId": "3e1804d6-7875-4642-9e6f-6fb4150cda39"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\khann\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:1111: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "C:\\Users\\khann\\anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_gb.py:570: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.9188009341834271\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Use GaussianNB to predict the accuracy of model\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "\n",
        "model = GaussianNB()\n",
        "\n",
        "# Train the model\n",
        "Gau_nb = model.fit(X_train, y_train)\n",
        "\n",
        "from sklearn import ensemble\n",
        "#classifier = ensemble.GradientBoostingClassifier()\n",
        "gb_nb = ensemble.GradientBoostingClassifier(random_state = 0,init=Gau_nb)\n",
        "gb_nb.fit(X_train,y_train)\n",
        "gb_nb.score(X_train,y_train).round(2)\n",
        "\n",
        "# Predict Output\n",
        "y_gus_gb_pred = gb_nb.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_gus_gb_pred)\n",
        "names = np.unique(y_gus_gb_pred)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_gus_gb_pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a629ca8a",
      "metadata": {
        "id": "a629ca8a",
        "outputId": "f450abec-7329-407d-a676-1168afbf8616"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GaussianNB and using all numeric features the AUC value is 0.5011\n",
        "\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_gus_gb_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_gus_gb_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c27c6e41",
      "metadata": {
        "id": "c27c6e41",
        "outputId": "59c12989-f82d-48ba-cf52-5cf795a45c51"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(307511, 21)\n",
            "(307511,)\n"
          ]
        }
      ],
      "source": [
        "# Selecting features with higher scores from previous assignments\n",
        "\n",
        "Y = Combinedfile.iloc[:,2].values.astype(int)\n",
        "X = Combinedfile.iloc[:,[4,5,6,7,9,10,11,12,13, 17, 18, 19, 20, 33,36, 107,108,109,110,113,114]].values.astype(int)\n",
        "#X = SampleData.iloc[:,[4,5,6,7,9,10,11,12,13, 17, 18, 19, 20, 107,108,109,110,113,114]].values.astype(int)\n",
        "#X = SampleData.iloc[:,[5,7,9,10,11,12,13, 17, 18, 19, 20, 33,36,110,113,114]].values.astype(int)\n",
        "print(X.shape)\n",
        "print(Y.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bd281431",
      "metadata": {
        "id": "bd281431"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "y_train=y_train.reshape(-1,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "45124ec4",
      "metadata": {
        "id": "45124ec4",
        "outputId": "485cc4a9-cd9b-4701-dff7-67e548827f8a"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\khann\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:1111: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "C:\\Users\\khann\\anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_gb.py:570: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.9198454852728151\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Use GaussianNB to predict the accuracy of model\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "\n",
        "model = GaussianNB()\n",
        "\n",
        "# Train the model\n",
        "Gau_nb = model.fit(X_train, y_train)\n",
        "\n",
        "from sklearn import ensemble\n",
        "#classifier = ensemble.GradientBoostingClassifier()\n",
        "gb_nb = ensemble.GradientBoostingClassifier(random_state = 0,init=Gau_nb)\n",
        "gb_nb.fit(X_train,y_train)\n",
        "gb_nb.score(X_train,y_train).round(2)\n",
        "\n",
        "# Predict Output\n",
        "y_gus_gb_pred = gb_nb.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_gus_gb_pred)\n",
        "names = np.unique(y_gus_gb_pred)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_gus_gb_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1931855d",
      "metadata": {
        "id": "1931855d",
        "outputId": "ea082f7d-5c7a-4a4e-d0a6-6f970219046e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GaussianNB and using all numeric features the AUC value is 0.501\n",
        "\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_gus_gb_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_gus_gb_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "81ace6ff",
      "metadata": {
        "id": "81ace6ff",
        "outputId": "009fb25a-1267-4575-d5f8-0851f10d8a95"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "24825\n"
          ]
        }
      ],
      "source": [
        "##Undersampling\n",
        "\n",
        "# get the target equals 1\n",
        "Target1 = Combinedfile.loc[Combinedfile['TARGET'] == 1]\n",
        "Numberofones=Target1.shape\n",
        "print(Numberofones[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8da08459",
      "metadata": {
        "id": "8da08459",
        "outputId": "6ebcaf36-5bd6-498d-ba0a-9ec5e09b65b8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(24825, 115)\n",
            "        Unnamed: 0  SK_ID_CURR  TARGET  CNT_CHILDREN  AMT_INCOME_TOTAL  \\\n",
            "0                0      100002       1             0          202500.0   \n",
            "26              26      100031       1             0          112500.0   \n",
            "40              40      100047       1             0          202500.0   \n",
            "42              42      100049       1             0          135000.0   \n",
            "81              81      100096       1             0           81000.0   \n",
            "...            ...         ...     ...           ...               ...   \n",
            "278979      278979      423213       0             0          315000.0   \n",
            "252600      252600      392285       0             1           81000.0   \n",
            "52290        52290      160551       0             0          112500.0   \n",
            "6091          6091      107122       0             0          405000.0   \n",
            "102274      102274      218731       0             0          112500.0   \n",
            "\n",
            "        AMT_CREDIT  AMT_ANNUITY_x  AMT_GOODS_PRICE  \\\n",
            "0         406597.5        24700.5         351000.0   \n",
            "26        979992.0        27076.5         702000.0   \n",
            "40       1193580.0        35028.0         855000.0   \n",
            "42        288873.0        16258.5         238500.0   \n",
            "81        252000.0        14593.5         252000.0   \n",
            "...            ...            ...              ...   \n",
            "278979    900000.0        33354.0         900000.0   \n",
            "252600    247500.0        22698.0         247500.0   \n",
            "52290     545040.0        26509.5         450000.0   \n",
            "6091     1006920.0        39933.0         900000.0   \n",
            "102274    229500.0        13302.0         229500.0   \n",
            "\n",
            "        REGION_POPULATION_RELATIVE  DAYS_BIRTH  ...  \\\n",
            "0                         0.018801       -9461  ...   \n",
            "26                        0.018029      -18724  ...   \n",
            "40                        0.025164      -17482  ...   \n",
            "42                        0.007305      -13384  ...   \n",
            "81                        0.028663      -24794  ...   \n",
            "...                            ...         ...  ...   \n",
            "278979                    0.028663      -19060  ...   \n",
            "252600                    0.008625      -11294  ...   \n",
            "52290                     0.008230      -22181  ...   \n",
            "6091                      0.018209      -13576  ...   \n",
            "102274                    0.006296      -17329  ...   \n",
            "\n",
            "        AMT_REQ_CREDIT_BUREAU_QRT  AMT_REQ_CREDIT_BUREAU_YEAR  AMT_CREDIT_SUM  \\\n",
            "0                             0.0                         1.0      481988.565   \n",
            "26                            2.0                         2.0      751279.500   \n",
            "40                            0.0                         4.0     7372800.000   \n",
            "42                            0.0                         2.0      677691.000   \n",
            "81                            0.0                         0.0           0.000   \n",
            "...                           ...                         ...             ...   \n",
            "278979                        0.0                         1.0      270000.000   \n",
            "252600                        0.0                         2.0      168388.200   \n",
            "52290                         3.0                         3.0     2643750.000   \n",
            "6091                          0.0                         3.0           0.000   \n",
            "102274                        0.0                         2.0           0.000   \n",
            "\n",
            "        AMT_CREDIT_SUM_DEBT  AMT_CREDIT_SUM_OVERDUE  DAYS_CREDIT  \\\n",
            "0                  245781.0                     0.0      -1145.0   \n",
            "26                      0.0                     0.0       -996.0   \n",
            "40                3220456.5                     0.0      -2571.0   \n",
            "42                 552442.5                     0.0      -2756.0   \n",
            "81                      0.0                     0.0          0.0   \n",
            "...                     ...                     ...          ...   \n",
            "278979             200583.0                     0.0       -518.0   \n",
            "252600                  0.0                     0.0       -675.0   \n",
            "52290              511519.5                     0.0      -3482.0   \n",
            "6091                    0.0                     0.0          0.0   \n",
            "102274                  0.0                     0.0          0.0   \n",
            "\n",
            "        CREDIT_DAY_OVERDUE  AMT_ANNUITY_y  AMT_BALANCE  \\\n",
            "0                      0.0            0.0        0.000   \n",
            "26                     0.0            0.0        0.000   \n",
            "40                     0.0            0.0        0.000   \n",
            "42                     0.0            0.0   626382.855   \n",
            "81                     0.0            0.0        0.000   \n",
            "...                    ...            ...          ...   \n",
            "278979                 0.0            0.0  5343555.105   \n",
            "252600                 0.0         9000.0        0.000   \n",
            "52290                  0.0            0.0        0.000   \n",
            "6091                   0.0            0.0  8098462.350   \n",
            "102274                 0.0            0.0        0.000   \n",
            "\n",
            "        AMT_INST_MIN_REGULARITY  \n",
            "0                          0.00  \n",
            "26                         0.00  \n",
            "40                         0.00  \n",
            "42                     22141.26  \n",
            "81                         0.00  \n",
            "...                         ...  \n",
            "278979                228512.70  \n",
            "252600                     0.00  \n",
            "52290                      0.00  \n",
            "6091                  388599.48  \n",
            "102274                     0.00  \n",
            "\n",
            "[49650 rows x 115 columns]\n"
          ]
        }
      ],
      "source": [
        "# select rows with number of zeros equal to number of one\n",
        "Target0 = Combinedfile.loc[Combinedfile['TARGET'] == 0].sample(Numberofones[0])\n",
        "print(Target0.shape)\n",
        "# combine the dataframes\n",
        "SampleData = pd.concat([Target1, Target0], axis=0)\n",
        "print(SampleData)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a051dce1",
      "metadata": {
        "id": "a051dce1",
        "outputId": "9baa7825-0183-4fb9-aba0-bef9cc780bde"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[      0  202500  406597 ...       0       0       0]\n",
            " [      0  112500  979992 ...       0       0       0]\n",
            " [      0  202500 1193580 ...       0       0       0]\n",
            " ...\n",
            " [      0  112500  545040 ...       0       0       0]\n",
            " [      0  405000 1006920 ...       0 8098462  388599]\n",
            " [      0  112500  229500 ...       0       0       0]]\n",
            "[1 1 1 ... 0 0 0]\n"
          ]
        }
      ],
      "source": [
        "#print(SampleData.head(5))\n",
        "Y = SampleData.iloc[:,2].values.astype(int)\n",
        "X = SampleData.iloc[:,3:].values.astype(int)\n",
        "print(X)\n",
        "print(Y)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c90083dc",
      "metadata": {
        "id": "c90083dc",
        "outputId": "6a7740df-f592-4691-a3cb-98794c6c6ce2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.4989319499542264\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "\n",
        "#X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "Gaumodel = GaussianNB()\n",
        "\n",
        "# Train the model\n",
        "Gaumodel.fit(X_train, y_train)\n",
        "\n",
        "# Predict Output\n",
        "y_pred = Gaumodel.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_pred)\n",
        "\n",
        "#plot_confusion_matrix(model, X_test, y_test)\n",
        "#plt.show()\n",
        "names = np.unique(y_pred)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "038e41f6",
      "metadata": {
        "id": "038e41f6",
        "outputId": "d2c2feb2-5d12-48e8-89a9-a9c0ac2f5b63"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GaussianNB and undersampled data with all numeric fatures the AUC value is 0.501 ( no improvement due to undersampling)\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "05843e3b",
      "metadata": {
        "id": "05843e3b",
        "outputId": "aedfb288-2713-4a49-be5e-162255c38ab0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of decision tree: 0.6393652731156546\n",
            "Accuracy of Decision tree: 0.6393652731156546\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "#train with gradient boosting algorithm\n",
        "gb_under = GradientBoostingClassifier(random_state = 0)\n",
        "gb_under.fit(X_train,y_train)\n",
        "gb_under.score(X_train,y_train).round(2)\n",
        "y_pred=gb_under.predict(X_test)\n",
        "print(\"Accuracy of decision tree:\",metrics.accuracy_score(y_test, y_pred))\n",
        "mat = confusion_matrix(y_test,y_pred)\n",
        "names = np.unique(y_pred)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "25361de5",
      "metadata": {
        "id": "25361de5",
        "outputId": "0899794e-212d-48db-f3e3-1b020dfaba7c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GradientBoostingClassifier and undersampled data with all numeric fatures the AUC value is 0.639(improved due to undersampling)\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "869c4aac",
      "metadata": {
        "id": "869c4aac",
        "outputId": "4738d414-b5d5-4224-eeef-3eb74ed000e7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.6176380836130607\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Use GausianNB model as input to GradientBoostingclassifier\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "\n",
        "model = GaussianNB()\n",
        "#X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "\n",
        "# Train the model\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "from sklearn import ensemble\n",
        "#classifier = ensemble.GradientBoostingClassifier()\n",
        "gb_nb = GradientBoostingClassifier(random_state = 0,init=model.fit(X_train, y_train))\n",
        "gb_nb.fit(X_train,y_train)\n",
        "gb_nb.score(X_train,y_train).round(2)\n",
        "\n",
        "# Predict Output\n",
        "y_pred = gb_nb.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_pred)\n",
        "\n",
        "#plot_confusion_matrix(model, X_test, y_test)\n",
        "#plt.show()\n",
        "names = np.unique(y_pred)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a7af93d4",
      "metadata": {
        "id": "a7af93d4",
        "outputId": "8615be0d-b916-40eb-ceb2-2fb1cc27c65c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GausianNB and GradientBoostingClassifier and undersampled data with all numeric fatures the AUC value is 0.617(improved due to undersampling)\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "653e8b9a",
      "metadata": {
        "id": "653e8b9a",
        "outputId": "50e46bc7-8447-4a1d-b3d5-67cac3f9d07b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY_x  AMT_GOODS_PRICE  DAYS_BIRTH  \\\n",
            "0          0.022956   -0.164375      -0.056536        -0.170586    0.500729   \n",
            "1         -0.044336    0.453647       0.007530         0.232155   -0.318922   \n",
            "\n",
            "   DAYS_EMPLOYED  DAYS_REGISTRATION  DAYS_ID_PUBLISH  OWN_CAR_AGE  \\\n",
            "0      -0.148312           0.114207         0.177918    -0.161117   \n",
            "1      -0.184487          -0.228776         0.296493    -0.193411   \n",
            "\n",
            "   FLAG_CONT_MOBILE  FLAG_PHONE  FLAG_EMAIL  CNT_FAM_MEMBERS  AMT_CREDIT_SUM  \\\n",
            "0          0.015317    0.593773   -0.087567        -0.448767       -0.067589   \n",
            "1          0.018387   -0.258315   -0.105119        -0.538716       -0.031423   \n",
            "\n",
            "   AMT_CREDIT_SUM_DEBT  AMT_CREDIT_SUM_OVERDUE  DAYS_CREDIT  AMT_BALANCE  \\\n",
            "0            -0.055568               -0.007503     0.004341    -0.116847   \n",
            "1            -0.119320               -0.009007     0.045578    -0.140268   \n",
            "\n",
            "   AMT_INST_MIN_REGULARITY  \n",
            "0                -0.116319  \n",
            "1                -0.139634  \n",
            "(49650, 19)\n",
            "(49650,)\n",
            "[[ 0.02295556 -0.16437494 -0.05653578 ...  0.00434141 -0.11684734\n",
            "  -0.11631917]\n",
            " [-0.04433552  0.45364661  0.00753047 ...  0.04557811 -0.1402677\n",
            "  -0.13963366]\n",
            " [ 0.01511728  0.38188943  0.14255454 ... -0.20907544 -0.07694929\n",
            "  -0.07660146]\n",
            " ...\n",
            " [-0.030571   -0.02768448 -0.00721411 ... -0.43297416 -0.09671982\n",
            "  -0.09628263]\n",
            " [ 0.07771326  0.19877089  0.17056567 ...  0.12947581  0.63575225\n",
            "   0.55378296]\n",
            " [-0.04084708 -0.36703278 -0.39577782 ...  0.29059337 -0.12923106\n",
            "  -0.12864691]]\n"
          ]
        }
      ],
      "source": [
        "# Selecting top scoring features from previous assignment\n",
        "# Standardizing and normalizing the data\n",
        "\n",
        "Y = SampleData.iloc[:,2].values.astype(int)\n",
        "df= SampleData.iloc[:,[4,5,6,7,9,10,11,12,13, 17, 18, 19, 20, 107,108,109,110,113,114]]\n",
        "df_X =  StandardScaler().fit_transform(df)\n",
        "df_X = normalize(df_X)\n",
        "print(pd.DataFrame(df_X, columns=df.columns).head(2))\n",
        "\n",
        "X = df_X.astype(float)\n",
        "print(X.shape)\n",
        "print(Y.shape)\n",
        "print(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dd04ba92",
      "metadata": {
        "id": "dd04ba92"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1512d180",
      "metadata": {
        "id": "1512d180",
        "outputId": "2f07c7ba-3033-4361-d0c8-75edc08ef246"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.537259688739701\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Applying GaussianNB model on selected features which are normanized and standardized\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "\n",
        "Gaumodel_select = GaussianNB()\n",
        "\n",
        "# Train the model\n",
        "Gaumodel_select.fit(X_train, y_train)\n",
        "\n",
        "# Predict Output\n",
        "y_pred = Gaumodel_select.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_pred)\n",
        "\n",
        "#plot_confusion_matrix(model, X_test, y_test)\n",
        "#plt.show()\n",
        "names = np.unique(y_pred)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b9cd6deb",
      "metadata": {
        "id": "b9cd6deb",
        "outputId": "0de39ae9-4932-44f7-e317-1aa58fa5ea3a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Accuracy of GaussianNB is increased to 0.539\n",
        "\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2c15a3cb",
      "metadata": {
        "id": "2c15a3cb",
        "outputId": "78b3e90a-71da-4d0e-b64c-15a171a13368"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.5994507171193164\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Inut GaussianNB to GradientBoosting classifier\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "\n",
        "#model = GaussianNB()\n",
        "#X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "\n",
        "# Train the model\n",
        "#model.fit(X_train, y_train)\n",
        "\n",
        "from sklearn import ensemble\n",
        "#classifier = ensemble.GradientBoostingClassifier()\n",
        "gb_nb_select = ensemble.GradientBoostingClassifier(random_state = 0,init=Gaumodel_select)\n",
        "gb_nb_select.fit(X_train,y_train)\n",
        "gb_nb_select.score(X_train,y_train).round(2)\n",
        "\n",
        "# Predict Output\n",
        "y_pred_gb_ng = gb_nb_select.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_pred_gb_ng)\n",
        "\n",
        "#plot_confusion_matrix(model, X_test, y_test)\n",
        "#plt.show()\n",
        "names = np.unique(y_pred_gb_ng)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_pred_gb_ng))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b4eec5c0",
      "metadata": {
        "id": "b4eec5c0",
        "outputId": "f8fa3647-a63a-4594-8774-993762fbc9c0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# AUC value of model increased to 0.5994\n",
        "\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_gb_ng)\n",
        "auc = metrics.roc_auc_score(y_test, y_pred_gb_ng)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aa8f62ec",
      "metadata": {
        "id": "aa8f62ec"
      },
      "outputs": [],
      "source": [
        "#GaussianNB model provided better accuracy with selected number of columns which are normalized and standardied compared to results of all features\n",
        "#Providing Naive Bayers as inputto GradientBoostingClassifier increased the AUC value from 0.53 to 0.59\n",
        "#GradientBoostingClassifier did provide AUC vaue 0.63 when tested with undersampled data without GausianNB as input which is the highest value so far in the experiment\n",
        "\n",
        "# Observations -\n",
        "#GradientBoostingClassifier did well when the data is undersamples means when the data has equal number of 0s and 1s in it\n",
        "#GradientBoostingClassifier did not perform well when data is not undersampled\n",
        "#NaiveBayers did not affect much with undersampling. However feature selection and data standarnization and normalization help improving the accuracy\n",
        "#Providing Naivebayers and input to Gradientbooster provided improved accuracy"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}