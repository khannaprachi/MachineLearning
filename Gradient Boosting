{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/khannaprachi/MachineLearning/blob/main/Gradient%20Boosting\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5d8d19e6",
      "metadata": {
        "id": "5d8d19e6",
        "outputId": "7184ba2b-3c26-4643-ea22-d38748c489a5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   SK_ID_BUREAU  MONTHS_BALANCE STATUS\n",
            "0       5715448               0      C\n",
            "1       5715448              -1      C\n",
            "2       5715448              -2      C\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import seaborn as sb\n",
        "from sklearn import decomposition\n",
        "from sklearn import datasets\n",
        "from sklearn.preprocessing import scale\n",
        "from sklearn.preprocessing import StandardScaler, normalize\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler, QuantileTransformer\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "\n",
        "# Bureau, Credit and Application train data grouped by SK_ID_CURR\n",
        "# Performing left joint of selective columns from Bureau(Active credits) and Credit Card data with Application train data\n",
        "\n",
        "#bureaudata = pd.read_csv(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\bureau.csv\")\n",
        "bureaubalance = pd.read_csv(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\bureau_balance.csv\")\n",
        "#bureauSummary=pd.merge(bureaudata,bureaubalance,on='SK_ID_BUREAU',how='left')\n",
        "print(bureaubalance.head(3))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ea67e7f6",
      "metadata": {
        "id": "ea67e7f6",
        "outputId": "0a802334-947d-4025-9b5e-a56305e891ef"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "          SK_ID_BUREAU  MONTHS_BALANCE STATUS  status_new  Status0  Status1  \\\n",
            "0              5715448               0      C           6      0.0      0.0   \n",
            "1              5715448              -1      C           6      0.0      0.0   \n",
            "2              5715448              -2      C           6      0.0      0.0   \n",
            "3              5715448              -3      C           6      0.0      0.0   \n",
            "4              5715448              -4      C           6      0.0      0.0   \n",
            "...                ...             ...    ...         ...      ...      ...   \n",
            "27299920       5041336             -47      X           7      0.0      0.0   \n",
            "27299921       5041336             -48      X           7      0.0      0.0   \n",
            "27299922       5041336             -49      X           7      0.0      0.0   \n",
            "27299923       5041336             -50      X           7      0.0      0.0   \n",
            "27299924       5041336             -51      X           7      0.0      0.0   \n",
            "\n",
            "          Status2  Status3  Status4  Status5  Status6  Status7  \n",
            "0             0.0      0.0      0.0      0.0      1.0      0.0  \n",
            "1             0.0      0.0      0.0      0.0      1.0      0.0  \n",
            "2             0.0      0.0      0.0      0.0      1.0      0.0  \n",
            "3             0.0      0.0      0.0      0.0      1.0      0.0  \n",
            "4             0.0      0.0      0.0      0.0      1.0      0.0  \n",
            "...           ...      ...      ...      ...      ...      ...  \n",
            "27299920      0.0      0.0      0.0      0.0      0.0      1.0  \n",
            "27299921      0.0      0.0      0.0      0.0      0.0      1.0  \n",
            "27299922      0.0      0.0      0.0      0.0      0.0      1.0  \n",
            "27299923      0.0      0.0      0.0      0.0      0.0      1.0  \n",
            "27299924      0.0      0.0      0.0      0.0      0.0      1.0  \n",
            "\n",
            "[27299925 rows x 12 columns]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.preprocessing import OneHotEncoder #import OneHotEncoder library\n",
        "# Converting type of columns to category\n",
        "bureaubalance['STATUS']=bureaubalance['STATUS'].astype('category')\n",
        "\n",
        "# Assigning numerical values and storing it in another columns\n",
        "bureaubalance['status_new']=bureaubalance['STATUS'].cat.codes\n",
        "\n",
        " #Create an instance of One-hot-encoder\n",
        "oneht=OneHotEncoder()\n",
        "\n",
        "#Passing encoded columns\n",
        "enc_data=pd.DataFrame(oneht.fit_transform(bureaubalance[['status_new']]).toarray())\n",
        "enc_data.columns=['Status0', 'Status1','Status2','Status3','Status4','Status5','Status6','Status7']\n",
        "\n",
        "#Merge with main\n",
        "New_df=bureaubalance.join(enc_data)\n",
        "\n",
        "print(New_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c976605f",
      "metadata": {
        "id": "c976605f"
      },
      "outputs": [],
      "source": [
        "bureaudata = pd.read_csv(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\bureau.csv\")\n",
        "bureaubalancegrouped = New_df.groupby(['SK_ID_BUREAU'], as_index=False)['Status0', 'Status1','Status2','Status3','Status4','Status5','Status6','Status7'].sum()\n",
        "bureaugroup = pd.merge(bureaudata,bureaubalancegrouped,on='SK_ID_BUREAU', how='left')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "17297e92",
      "metadata": {
        "id": "17297e92",
        "outputId": "7fd97e75-c9ec-459c-9cf1-e2dd574fdfd2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   SK_ID_CURR  SK_ID_BUREAU CREDIT_ACTIVE CREDIT_CURRENCY  DAYS_CREDIT  \\\n",
            "0      215354       5714462        Closed      currency 1         -497   \n",
            "1      215354       5714463        Active      currency 1         -208   \n",
            "2      215354       5714464        Active      currency 1         -203   \n",
            "3      215354       5714465        Active      currency 1         -203   \n",
            "4      215354       5714466        Active      currency 1         -629   \n",
            "\n",
            "   CREDIT_DAY_OVERDUE  DAYS_CREDIT_ENDDATE  DAYS_ENDDATE_FACT  \\\n",
            "0                   0               -153.0             -153.0   \n",
            "1                   0               1075.0                NaN   \n",
            "2                   0                528.0                NaN   \n",
            "3                   0                  NaN                NaN   \n",
            "4                   0               1197.0                NaN   \n",
            "\n",
            "   AMT_CREDIT_MAX_OVERDUE  CNT_CREDIT_PROLONG  ...  DAYS_CREDIT_UPDATE  \\\n",
            "0                     NaN                   0  ...                -131   \n",
            "1                     NaN                   0  ...                 -20   \n",
            "2                     NaN                   0  ...                 -16   \n",
            "3                     NaN                   0  ...                 -16   \n",
            "4                 77674.5                   0  ...                 -21   \n",
            "\n",
            "   AMT_ANNUITY  Status0  Status1 Status2  Status3  Status4  Status5  Status6  \\\n",
            "0          NaN      NaN      NaN     NaN      NaN      NaN      NaN      NaN   \n",
            "1          NaN      NaN      NaN     NaN      NaN      NaN      NaN      NaN   \n",
            "2          NaN      NaN      NaN     NaN      NaN      NaN      NaN      NaN   \n",
            "3          NaN      NaN      NaN     NaN      NaN      NaN      NaN      NaN   \n",
            "4          NaN      NaN      NaN     NaN      NaN      NaN      NaN      NaN   \n",
            "\n",
            "   Status7  \n",
            "0      NaN  \n",
            "1      NaN  \n",
            "2      NaN  \n",
            "3      NaN  \n",
            "4      NaN  \n",
            "\n",
            "[5 rows x 25 columns]\n",
            "(1716428, 25)\n"
          ]
        }
      ],
      "source": [
        "print(bureaugroup.head(5))\n",
        "print(bureaugroup.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bccf79fc",
      "metadata": {
        "id": "bccf79fc",
        "outputId": "928fd37d-37a6-4750-e878-cc50e84e2b99"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "        SK_ID_CURR  AMT_CREDIT_SUM  AMT_CREDIT_SUM_DEBT  \\\n",
            "0           100001     1453365.000           596686.500   \n",
            "1           100002      865055.565           245781.000   \n",
            "2           100003     1017400.500                0.000   \n",
            "3           100004      189037.800                0.000   \n",
            "4           100005      657126.000           568408.500   \n",
            "...            ...             ...                  ...   \n",
            "305806      456249     3693858.660           163071.000   \n",
            "305807      456250     3086459.550          2232040.095   \n",
            "305808      456253     3960000.000          1795833.000   \n",
            "305809      456254       45000.000                0.000   \n",
            "305810      456255     3801919.500          1534913.010   \n",
            "\n",
            "        AMT_CREDIT_SUM_OVERDUE  DAYS_CREDIT  CREDIT_DAY_OVERDUE  AMT_ANNUITY  \\\n",
            "0                          0.0        -5145                   0    24817.500   \n",
            "1                          0.0        -6992                   0        0.000   \n",
            "2                          0.0        -5603                   0        0.000   \n",
            "3                          0.0        -1734                   0        0.000   \n",
            "4                          0.0         -572                   0     4261.500   \n",
            "...                        ...          ...                 ...          ...   \n",
            "305806                     0.0       -21672                   0        0.000   \n",
            "305807                     0.0        -2586                   0   463703.895   \n",
            "305808                     0.0        -3470                   0   175108.500   \n",
            "305809                     0.0        -1104                   0        0.000   \n",
            "305810                     0.0       -11984                   0     9733.500   \n",
            "\n",
            "        Status0  Status1  Status2  Status3  Status4  Status5  Status6  Status7  \n",
            "0          31.0      1.0      0.0      0.0      0.0      0.0    110.0     30.0  \n",
            "1          45.0     27.0      0.0      0.0      0.0      0.0     23.0     15.0  \n",
            "2           0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
            "3           0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
            "4          14.0      0.0      0.0      0.0      0.0      0.0      5.0      2.0  \n",
            "...         ...      ...      ...      ...      ...      ...      ...      ...  \n",
            "305806      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
            "305807     12.0      0.0      0.0      0.0      0.0      0.0     25.0     50.0  \n",
            "305808     47.0      0.0      0.0      0.0      0.0      0.0     57.0     13.0  \n",
            "305809      8.0      0.0      0.0      0.0      0.0      0.0     29.0      0.0  \n",
            "305810     63.0      0.0      0.0      0.0      0.0      0.0    213.0     17.0  \n",
            "\n",
            "[305811 rows x 15 columns]\n"
          ]
        }
      ],
      "source": [
        "bureaugroupdata = bureaugroup.groupby(['SK_ID_CURR'], as_index=False)['AMT_CREDIT_SUM','AMT_CREDIT_SUM_DEBT','AMT_CREDIT_SUM_OVERDUE','DAYS_CREDIT','CREDIT_DAY_OVERDUE','AMT_ANNUITY','Status0', 'Status1','Status2','Status3','Status4','Status5','Status6','Status7'].sum()\n",
        "print(bureaugroupdata)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "63aa14c7",
      "metadata": {
        "id": "63aa14c7"
      },
      "outputs": [],
      "source": [
        "applicationdata = pd.read_csv(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\application_train.csv\")\n",
        "appbureargroup=pd.merge(applicationdata,bureaugroupdata,on='SK_ID_CURR', how='left')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "25d0b786",
      "metadata": {
        "id": "25d0b786",
        "outputId": "4322cf18-127a-44b8-d138-a2a8ce164053"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(307511, 136)\n"
          ]
        }
      ],
      "source": [
        "print(appbureargroup.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ec78b4e3",
      "metadata": {
        "id": "ec78b4e3",
        "outputId": "a3084475-553f-45b9-fc82-ac781409f5d0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   SK_ID_CURR  TARGET  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  \\\n",
            "0      100002       1             0          202500.0    406597.5   \n",
            "1      100003       0             0          270000.0   1293502.5   \n",
            "2      100004       0             0           67500.0    135000.0   \n",
            "3      100006       0             0          135000.0    312682.5   \n",
            "4      100007       0             0          121500.0    513000.0   \n",
            "\n",
            "   AMT_ANNUITY_x  AMT_GOODS_PRICE  REGION_POPULATION_RELATIVE  DAYS_BIRTH  \\\n",
            "0        24700.5         351000.0                    0.018801       -9461   \n",
            "1        35698.5        1129500.0                    0.003541      -16765   \n",
            "2         6750.0         135000.0                    0.010032      -19046   \n",
            "3        29686.5         297000.0                    0.008019      -19005   \n",
            "4        21865.5         513000.0                    0.028663      -19932   \n",
            "\n",
            "   DAYS_EMPLOYED  ...  CREDIT_DAY_OVERDUE  AMT_ANNUITY_y  Status0  Status1  \\\n",
            "0           -637  ...                 0.0            0.0     45.0     27.0   \n",
            "1          -1188  ...                 0.0            0.0      0.0      0.0   \n",
            "2           -225  ...                 0.0            0.0      0.0      0.0   \n",
            "3          -3039  ...                 NaN            NaN      NaN      NaN   \n",
            "4          -3038  ...                 0.0            0.0      0.0      0.0   \n",
            "\n",
            "   Status2  Status3  Status4  Status5  Status6  Status7  \n",
            "0      0.0      0.0      0.0      0.0     23.0     15.0  \n",
            "1      0.0      0.0      0.0      0.0      0.0      0.0  \n",
            "2      0.0      0.0      0.0      0.0      0.0      0.0  \n",
            "3      NaN      NaN      NaN      NaN      NaN      NaN  \n",
            "4      0.0      0.0      0.0      0.0      0.0      0.0  \n",
            "\n",
            "[5 rows x 120 columns]\n"
          ]
        }
      ],
      "source": [
        "appbureargroup = appbureargroup.select_dtypes(exclude=[\"object\"])\n",
        "print(appbureargroup.head(5))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "81966470",
      "metadata": {
        "id": "81966470"
      },
      "outputs": [],
      "source": [
        "appbureargroup['AMT_INCOME_TOTAL'].fillna((appbureargroup['AMT_INCOME_TOTAL'].mean()), inplace=True)\n",
        "appbureargroup['AMT_CREDIT'].fillna((appbureargroup['AMT_CREDIT'].mean()), inplace=True)\n",
        "appbureargroup['AMT_ANNUITY_x'].fillna((appbureargroup['AMT_ANNUITY_x'].mean()), inplace=True)\n",
        "appbureargroup['AMT_GOODS_PRICE'].fillna((appbureargroup['AMT_GOODS_PRICE'].mean()), inplace=True)\n",
        "appbureargroup['DAYS_BIRTH'].fillna((appbureargroup['DAYS_BIRTH'].mean()), inplace=True)\n",
        "appbureargroup['DAYS_EMPLOYED'].fillna((appbureargroup['DAYS_EMPLOYED'].mean()), inplace=True)\n",
        "appbureargroup['CNT_FAM_MEMBERS'].fillna((appbureargroup['CNT_FAM_MEMBERS'].mean()), inplace=True)\n",
        "appbureargroup['APARTMENTS_AVG'].fillna((appbureargroup['APARTMENTS_AVG'].mean()), inplace=True)\n",
        "appbureargroup['YEARS_BUILD_AVG'].fillna((appbureargroup['YEARS_BUILD_AVG'].mean()), inplace=True)\n",
        "appbureargroup['AMT_CREDIT_SUM'].fillna((appbureargroup['AMT_CREDIT_SUM'].mean()), inplace=True)\n",
        "appbureargroup['AMT_CREDIT_SUM_DEBT'].fillna((appbureargroup['AMT_CREDIT_SUM_DEBT'].mean()), inplace=True)\n",
        "appbureargroup['AMT_CREDIT_SUM_OVERDUE'].fillna((appbureargroup['AMT_CREDIT_SUM_OVERDUE'].mean()), inplace=True)\n",
        "appbureargroup['DAYS_CREDIT'].fillna((appbureargroup['DAYS_CREDIT'].mean()), inplace=True)\n",
        "#appbureargroup['AMT_BALANCE'].fillna((appbureargroup['AMT_BALANCE'].mean()), inplace=True)\n",
        "#appbureargroup['AMT_INST_MIN_REGULARITY'].fillna((appbureargroup['AMT_INST_MIN_REGULARITY'].mean()), inplace=True)\n",
        "appbureargroup.fillna(value = 0, inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cf8002a0",
      "metadata": {
        "id": "cf8002a0"
      },
      "outputs": [],
      "source": [
        "appbureargroup.to_csv('C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/appbureargroup.csv', header=None,index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0f6515fc",
      "metadata": {
        "id": "0f6515fc",
        "outputId": "f1120779-6673-4528-d10c-349539e42eaa"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   TARGET  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY_x  \\\n",
            "0       1             0          202500.0    406597.5        24700.5   \n",
            "1       0             0          270000.0   1293502.5        35698.5   \n",
            "2       0             0           67500.0    135000.0         6750.0   \n",
            "3       0             0          135000.0    312682.5        29686.5   \n",
            "4       0             0          121500.0    513000.0        21865.5   \n",
            "\n",
            "   AMT_GOODS_PRICE  REGION_POPULATION_RELATIVE  DAYS_EMPLOYED  \\\n",
            "0         351000.0                    0.018801            637   \n",
            "1        1129500.0                    0.003541           1188   \n",
            "2         135000.0                    0.010032            225   \n",
            "3         297000.0                    0.008019           3039   \n",
            "4         513000.0                    0.028663           3038   \n",
            "\n",
            "   DAYS_REGISTRATION  DAYS_ID_PUBLISH  ...  AMT_CREDIT_SUM_OVERDUE  \\\n",
            "0             3648.0             2120  ...                0.000000   \n",
            "1             1186.0              291  ...                0.000000   \n",
            "2             4260.0             2531  ...                0.000000   \n",
            "3             9833.0             2437  ...              223.034341   \n",
            "4             4311.0             3458  ...                0.000000   \n",
            "\n",
            "   DAYS_CREDIT  CREDIT_DAY_OVERDUE  Status1  Status2  Status3  Status4  \\\n",
            "0  6992.000000                 0.0     27.0      0.0      0.0      0.0   \n",
            "1  5603.000000                 0.0      0.0      0.0      0.0      0.0   \n",
            "2  1734.000000                 0.0      0.0      0.0      0.0      0.0   \n",
            "3  6359.785632                 0.0      0.0      0.0      0.0      0.0   \n",
            "4  1149.000000                 0.0      0.0      0.0      0.0      0.0   \n",
            "\n",
            "   Status5  Status6  Status7  \n",
            "0      0.0     23.0     15.0  \n",
            "1      0.0      0.0      0.0  \n",
            "2      0.0      0.0      0.0  \n",
            "3      0.0      0.0      0.0  \n",
            "4      0.0      0.0      0.0  \n",
            "\n",
            "[5 rows x 22 columns]\n"
          ]
        }
      ],
      "source": [
        "HMMRawData=appbureargroup.iloc[:,[1,2,3,4,5,6,7,9,10,11,12,107,108,109,110,113,114,115,116,117,118,119]]\n",
        "HMMRawData=HMMRawData.abs()\n",
        "print(HMMRawData.head(5))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "29f300bd",
      "metadata": {
        "id": "29f300bd",
        "outputId": "df3a83cd-031e-45d6-b649-5dbb8ee7ae4b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "24825\n",
            "(24825, 120)\n",
            "    TARGET  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY_x  \\\n",
            "0        1             0          202500.0    406597.5        24700.5   \n",
            "26       1             0          112500.0    979992.0        27076.5   \n",
            "40       1             0          202500.0   1193580.0        35028.0   \n",
            "42       1             0          135000.0    288873.0        16258.5   \n",
            "81       1             0           81000.0    252000.0        14593.5   \n",
            "\n",
            "    AMT_GOODS_PRICE  REGION_POPULATION_RELATIVE  DAYS_EMPLOYED  \\\n",
            "0          351000.0                    0.018801            637   \n",
            "26         702000.0                    0.018029           2628   \n",
            "40         855000.0                    0.025164           1262   \n",
            "42         238500.0                    0.007305           3597   \n",
            "81         252000.0                    0.028663         365243   \n",
            "\n",
            "    DAYS_REGISTRATION  DAYS_ID_PUBLISH  ...  AMT_CREDIT_SUM_OVERDUE  \\\n",
            "0              3648.0             2120  ...                     0.0   \n",
            "26             6573.0             1827  ...                     0.0   \n",
            "40             1182.0             1029  ...                     0.0   \n",
            "42               45.0             4409  ...                     0.0   \n",
            "81             5391.0             4199  ...                     0.0   \n",
            "\n",
            "    DAYS_CREDIT  CREDIT_DAY_OVERDUE  Status1  Status2  Status3  Status4  \\\n",
            "0        6992.0                 0.0     27.0      0.0      0.0      0.0   \n",
            "26       4057.0                 0.0      0.0      0.0      0.0      0.0   \n",
            "40       5524.0                 0.0      0.0      0.0      0.0      0.0   \n",
            "42       5734.0                 0.0      0.0      0.0      0.0      0.0   \n",
            "81       2922.0                 0.0      0.0      0.0      0.0      0.0   \n",
            "\n",
            "    Status5  Status6  Status7  \n",
            "0       0.0     23.0     15.0  \n",
            "26      0.0      0.0      0.0  \n",
            "40      0.0      0.0      0.0  \n",
            "42      0.0      0.0      0.0  \n",
            "81      0.0      0.0      0.0  \n",
            "\n",
            "[5 rows x 22 columns]\n"
          ]
        }
      ],
      "source": [
        "Target1 = appbureargroup.loc[appbureargroup['TARGET'] == 1]\n",
        "Numberofones=Target1.shape\n",
        "print(Numberofones[0])\n",
        "# select rows with number of zeros equal to number of one\n",
        "Target0 = appbureargroup.loc[appbureargroup['TARGET'] == 0].sample(Numberofones[0])\n",
        "print(Target0.shape)\n",
        "# combine the dataframes\n",
        "SampleData = pd.concat([Target1, Target0], axis=0)\n",
        "HMMRawData=SampleData.iloc[:,[1,2,3,4,5,6,7,9,10,11,12,107,108,109,110,113,114,115,116,117,118,119]]\n",
        "HMMRawData=HMMRawData.abs()\n",
        "print(HMMRawData.head(5))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3076b90d",
      "metadata": {
        "id": "3076b90d"
      },
      "outputs": [],
      "source": [
        "HMMRawData.to_csv('C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/HMMAppburea.csv', header=None,index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c1de3b7c",
      "metadata": {
        "id": "c1de3b7c",
        "outputId": "30da05a9-9eb4-4faa-a1ed-cfb236c3152b"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Even though the 'startprob_' attribute is set, it will be overwritten during initialization because 'init_params' contains 's'\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[0.000000e+00 0.000000e+00 0.000000e+00 ... 2.000000e+00 0.000000e+00\n",
            "  0.000000e+00]\n",
            " [2.025000e+05 1.125000e+05 2.025000e+05 ... 1.125000e+05 9.000000e+04\n",
            "  9.000000e+04]\n",
            " [4.065975e+05 9.799920e+05 1.193580e+06 ... 6.867495e+05 5.925600e+05\n",
            "  1.350000e+05]\n",
            " ...\n",
            " [0.000000e+00 0.000000e+00 0.000000e+00 ... 0.000000e+00 0.000000e+00\n",
            "  0.000000e+00]\n",
            " [2.300000e+01 0.000000e+00 0.000000e+00 ... 2.610000e+02 0.000000e+00\n",
            "  0.000000e+00]\n",
            " [1.500000e+01 0.000000e+00 0.000000e+00 ... 4.300000e+01 0.000000e+00\n",
            "  4.000000e+00]]\n",
            "[[ 0.         12.21849517 12.91557903 ...  0.          3.13549422\n",
            "   2.7080502 ]\n",
            " [ 0.         11.6307085  13.79529969 ...  0.          0.\n",
            "   0.        ]\n",
            " [ 0.         12.21849517 13.99246775 ...  0.          0.\n",
            "   0.        ]\n",
            " ...\n",
            " [ 0.69314718 11.6307085  13.43972488 ...  0.          5.56452041\n",
            "   3.76120012]\n",
            " [ 0.         11.40756495 13.29220741 ...  0.          0.\n",
            "   0.        ]\n",
            " [ 0.         11.40756495 11.81303006 ...  0.          0.\n",
            "   1.38629436]]\n",
            "(49650, 21)\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import seaborn as sb\n",
        "from sklearn import decomposition\n",
        "from sklearn import datasets\n",
        "from sklearn.preprocessing import scale\n",
        "from sklearn.preprocessing import StandardScaler, normalize\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler, QuantileTransformer\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from hmmlearn.hmm import GaussianHMM\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "Yval = pd.read_csv(\"C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/HMMAppburea.csv\", header=None)\n",
        "y_test=Yval.iloc[:,0].values.astype(int)\n",
        "\n",
        "AnnualQ = np.loadtxt(\"C:\\\\Users\\\\khann\\\\Desktop\\\\Python Assignments\\\\home-credit-default-risk\\\\HMMAppburea.csv\", delimiter=',')\n",
        "ReshapedAQ=np.column_stack(AnnualQ[:,1:])\n",
        "#ReshapedAQ=np.column_stack(AnnualQ[:,:])\n",
        "#y_test=np.column_stack(AnnualQ[:,0]).transpose()\n",
        "#y_test=y_test.astype(int)\n",
        "print(ReshapedAQ)\n",
        "Reshapedin = np.log(ReshapedAQ)\n",
        "Reshapedin=np.nan_to_num(Reshapedin, nan=0, posinf=0, neginf=0)\n",
        "\n",
        "Reshapedin = Reshapedin.transpose()\n",
        "print(Reshapedin)\n",
        "print(Reshapedin.shape)\n",
        "#Reshapedin=np.reshape(Reshapedin,[len(Reshapedin),1])\n",
        "#Reshapedin=Reshapedin.astype(int)\n",
        "#Reshapedin=set(Reshapedin.ravel())\n",
        "nSamples=1000\n",
        "\n",
        "df = pd.DataFrame(Reshapedin)\n",
        "\n",
        "#df.to_csv('C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/hmmready.csv', header=None,index=False)\n",
        "\n",
        "#-np.log(n_components)\n",
        "\n",
        "\n",
        "modelHMM = GaussianHMM(n_components=2, n_iter=5000)\n",
        "modelHMM.startprob_= np.array([0.5,0.5])\n",
        "\n",
        "#model.startprob_ = np.array([0.5,0.5])\n",
        "model = modelHMM.fit(Reshapedin)\n",
        "\n",
        "# classify each observation as state 0 or 1\n",
        "hidden_states = model.predict(Reshapedin)\n",
        "\n",
        "# find parameters of Gaussian HMM\n",
        "mus = np.array(model.means_)\n",
        "sigmas = np.array(np.sqrt(np.array([np.diag(model.covars_[0]),np.diag(model.covars_[1])])))\n",
        "P = np.array(model.transmat_)\n",
        "#samples = model.sample(nSamples)\n",
        "# find log-likelihood of Gaussian HMM\n",
        "logProb = model.score(Reshapedin)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b509503e",
      "metadata": {
        "id": "b509503e",
        "outputId": "abf9ad2d-04c0-4849-e855-9b5f4a6cd323"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[ 8.05234653e-02  1.19046503e+01  1.30532950e+01  1.00605027e+01\n",
            "   1.29313359e+01 -4.13382530e+00  8.00713557e+00  8.01025359e+00\n",
            "   7.66081268e+00  6.98795499e-01  1.28716229e+01  1.24092339e+00\n",
            "   8.29791197e+00  7.85842148e-02  1.08196617e-01  0.00000000e+00\n",
            "   0.00000000e+00  0.00000000e+00  0.00000000e+00  8.18712548e-01\n",
            "   6.15989661e-01]\n",
            " [ 7.37289841e-02  1.18555972e+01  1.30525933e+01  1.00883072e+01\n",
            "   1.29346037e+01 -4.11213060e+00  8.10817100e+00  8.08081817e+00\n",
            "   7.76780643e+00  6.98579977e-01  5.98079742e-01  1.96767904e-02\n",
            "   7.90005764e+00  1.17062741e-02  1.71437406e-01  5.86347442e-02\n",
            "   2.36566790e-02  1.55363886e-02  8.15401854e-02  1.17217085e+00\n",
            "   5.83692639e-01]]\n",
            "92.30542077822125\n",
            "79.18426475190424\n"
          ]
        }
      ],
      "source": [
        "print(mus)\n",
        "M0sum=0\n",
        "M1sum=0\n",
        "muscolumns=mus.shape[1]\n",
        "musrows=mus.shape[0]\n",
        "for j in range(muscolumns):\n",
        "    for i in range(musrows):\n",
        "        if i == 0:\n",
        "            M0sum=M0sum+mus[i][j]\n",
        "        else:\n",
        "            M1sum=M1sum+mus[i][j]\n",
        "print(M0sum)\n",
        "print(M1sum)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "542afc3b",
      "metadata": {
        "id": "542afc3b"
      },
      "outputs": [],
      "source": [
        "if M0sum > M1sum:\n",
        "        mus = np.flipud(mus)\n",
        "        sigmas = np.flipud(sigmas)\n",
        "        P = np.fliplr(np.flipud(P))\n",
        "        hidden_states = 1 - hidden_states"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "331c049d",
      "metadata": {
        "id": "331c049d",
        "outputId": "cb20d0c7-054a-4c4d-bb47-203a17d91583"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-84438.73265146116\n",
            "(49650,)\n",
            "[1 1 1 ... 1 1 1]\n",
            "[ 7.37289841e-02  1.18555972e+01  1.30525933e+01  1.00883072e+01\n",
            "  1.29346037e+01 -4.11213060e+00  8.10817100e+00  8.08081817e+00\n",
            "  7.76780643e+00  6.98579977e-01  5.98079742e-01  1.96767904e-02\n",
            "  7.90005764e+00  1.17062741e-02  1.71437406e-01  5.86347442e-02\n",
            "  2.36566790e-02  1.55363886e-02  8.15401854e-02  1.17217085e+00\n",
            "  5.83692639e-01]\n",
            "[ 0.08052347 11.90465033 13.05329504 10.06050273 12.93133588 -4.1338253\n",
            "  8.00713557  8.01025359  7.66081268  0.6987955  12.8716229   1.24092339\n",
            "  8.29791197  0.07858421  0.10819662  0.          0.          0.\n",
            "  0.          0.81871255  0.61598966]\n",
            "[[2.30784181e-01 4.79698471e-01 6.98123585e-01 5.33042846e-01\n",
            "  6.98081632e-01 7.15403139e-01 2.31218223e+00 1.22124335e+00\n",
            "  9.18416791e-01 1.14785276e+00 2.72292135e+00 3.93750058e-01\n",
            "  1.13669667e+00 2.36097738e-01 5.72342145e-01 2.89030658e-01\n",
            "  1.71175298e-01 1.35041411e-01 4.85126131e-01 1.87822437e+00\n",
            "  1.28932925e+00]\n",
            " [2.40466839e-01 4.75116410e-01 6.77419179e-01 5.21087872e-01\n",
            "  6.77883640e-01 7.06888181e-01 2.21889361e+00 1.21395282e+00\n",
            "  9.83575522e-01 1.14576342e+00 1.50272175e+00 2.33829976e+00\n",
            "  1.20069949e+00 6.10205068e-01 4.36216396e-01 5.10079039e-04\n",
            "  5.10079039e-04 5.10079039e-04 5.10079039e-04 1.68850673e+00\n",
            "  1.33648162e+00]]\n",
            "[[0.23406671 0.76593329]\n",
            " [0.2235027  0.7764973 ]]\n",
            "[1 1 1 ... 0 0 0]\n"
          ]
        }
      ],
      "source": [
        "print(logProb)\n",
        "print(hidden_states.shape)\n",
        "print(hidden_states)\n",
        "print(mus[0])\n",
        "print(mus[1])\n",
        "print(sigmas)\n",
        "print(P)\n",
        "print(y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d6fe7b9a",
      "metadata": {
        "id": "d6fe7b9a",
        "outputId": "ef8bae99-33c0-49f3-f4cc-90c806cb3e91"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(89.18, 0.5, 'Predicted')"
            ]
          },
          "execution_count": 142,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "\n",
        "mat = confusion_matrix(y_test,hidden_states)\n",
        "names = np.unique(hidden_states)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "479c71df",
      "metadata": {
        "id": "479c71df",
        "outputId": "43027550-2bcb-49f2-e067-5f3e3f9db2d3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fpr, tpr, _ = metrics.roc_curve(y_test,  hidden_states)\n",
        "auc = metrics.roc_auc_score(y_test, hidden_states)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ab779b85",
      "metadata": {
        "id": "ab779b85"
      },
      "outputs": [],
      "source": [
        "Yval = pd.read_csv(\"C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/HMMAppburea.csv\", header=None)\n",
        "Y=Yval.iloc[:,0].values\n",
        "Xval = pd.read_csv(\"C:/Users/khann/Desktop/Python Assignments/home-credit-default-risk/HMMAppburea.csv\", header=None)\n",
        "X=Xval.iloc[:,1:]\n",
        "df_X =  StandardScaler().fit_transform(df)\n",
        "df_X = normalize(df_X)\n",
        "X_train, X_test, y_train, y_test = train_test_split(df_X, Y, test_size=0.33, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f3133c09",
      "metadata": {
        "id": "f3133c09",
        "outputId": "2555dca5-c414-4a20-9318-8dd781bf3488"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[-0.04602781  0.09468189 -0.02800518 ... -0.01097483  0.17859626\n",
            "   0.21986794]\n",
            " [-0.15821595 -0.26329369  0.5193778  ... -0.03772486 -0.24659918\n",
            "  -0.21913159]\n",
            " [-0.11704706  0.24077263  0.48630978 ... -0.02790859 -0.18243236\n",
            "  -0.16211203]\n",
            " ...\n",
            " [ 0.49454528 -0.10584754  0.10876096 ... -0.01516589  0.51478961\n",
            "   0.45624905]\n",
            " [-0.12913192 -0.39731743  0.13655073 ... -0.03079009 -0.20126812\n",
            "  -0.17884975]\n",
            " [-0.09544864 -0.29367959 -0.52355519 ... -0.02275868 -0.14876855\n",
            "   0.1688813 ]]\n"
          ]
        }
      ],
      "source": [
        "print(df_X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e4e6b1c5",
      "metadata": {
        "id": "e4e6b1c5",
        "outputId": "69e1c52c-6c79-4451-b44c-cc58887284c0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.6118400976502899\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Use GaussianNB to predict the accuracy of model\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "from hmmlearn.hmm import BaseHMM\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn import ensemble\n",
        "\n",
        "#classifier = ensemble.GradientBoostingClassifier()\n",
        "gb_nb_x = ensemble.GradientBoostingClassifier(random_state = 0)\n",
        "\n",
        "y_train=y_train.reshape(-1, 1)\n",
        "\n",
        "gb_nb_x.fit(X_train,y_train)\n",
        "gb_nb_x.score(X_train,y_train).round(2)\n",
        "\n",
        "# Predict Output\n",
        "y_gus_gb_pred_x = gb_nb_x.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_gus_gb_pred_x)\n",
        "names = np.unique(y_gus_gb_pred_x)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_gus_gb_pred_x))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ed69cbb2",
      "metadata": {
        "id": "ed69cbb2",
        "outputId": "5948e5db-b570-45d0-acfe-b82aef815633"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GaussianNB and using all numeric features the AUC value is 0.5011\n",
        "\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_gus_gb_pred_x)\n",
        "auc = metrics.roc_auc_score(y_test, y_gus_gb_pred_x)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ed0dfec5",
      "metadata": {
        "id": "ed0dfec5",
        "outputId": "a059edf1-4d3f-443b-ebf9-5cfebd0a5cc4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(49650,)\n",
            "(49650,)\n",
            "[1 1 1 ... 1 1 1]\n",
            "[0 1 1 ... 0 1 0]\n",
            "[0 1 0 ... 0 0 1]\n",
            "[0 0 0 ... 1 0 0]\n"
          ]
        }
      ],
      "source": [
        "X=hidden_states\n",
        "print(X.shape)\n",
        "print(Y.shape)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=0)\n",
        "print(X_train)\n",
        "print(X_test)\n",
        "print(y_train)\n",
        "print(y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "425e2713",
      "metadata": {
        "id": "425e2713",
        "outputId": "0bba451f-3d0a-4186-dcd0-4fa5b447daff"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of Decision tree: 0.5368324687213916\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Use GaussianNB to predict the accuracy of model\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn import metrics\n",
        "from hmmlearn.hmm import BaseHMM\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "\n",
        "from sklearn import ensemble\n",
        "#classifier = ensemble.GradientBoostingClassifier()\n",
        "gb_nb = ensemble.GradientBoostingClassifier(random_state = 0, init=gb_nb_x)\n",
        "gb_nb.startprob_= np.array([0.5,0.5])\n",
        "\n",
        "X_train=X_train.reshape(-1, 1)\n",
        "y_train=y_train.reshape(-1, 1)\n",
        "X_test=X_test.reshape(-1, 1)\n",
        "\n",
        "gb_nb.fit(X_train,y_train)\n",
        "gb_nb.score(X_train,y_train).round(2)\n",
        "\n",
        "# Predict Output\n",
        "y_gus_gb_pred = gb_nb.predict(X_test)\n",
        "#print(pred[:5])\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "mat = confusion_matrix(y_test,y_gus_gb_pred)\n",
        "names = np.unique(y_gus_gb_pred)\n",
        "sns.heatmap(mat, square=True, annot=True, fmt='d', cbar=False, xticklabels=names, yticklabels=names)\n",
        "plt.xlabel('Truth')\n",
        "plt.ylabel('Predicted')\n",
        "print(\"Accuracy of Decision tree:\",metrics.accuracy_score(y_test, y_gus_gb_pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "50e6452c",
      "metadata": {
        "id": "50e6452c",
        "outputId": "4b9c62b5-3c91-4ca7-ebf9-7712eafa13a7"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# With GaussianNB and using all numeric features the AUC value is 0.5011\n",
        "\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test,  y_gus_gb_pred)\n",
        "auc = metrics.roc_auc_score(y_test, y_gus_gb_pred)\n",
        "\n",
        "#create ROC curve\n",
        "plt.plot(fpr,tpr,label=\"AUC=\"+str(auc))\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ed21cfe1",
      "metadata": {
        "id": "ed21cfe1"
      },
      "outputs": [],
      "source": [
        "#I have used Bureau_balance sheet to use time series component of data.\n",
        "#Bureau_balance file provides values for status of load with respect to credit months for SK_BUREAU_ID\n",
        "#I have used one hot encoding for status column and then grouped by SK_BUREAU_ID\n",
        "# Merged application_train.csv, bureau.csv and Bureau_balance.csv files\n",
        "# Chose colums from previous assignment along with columns from Bureau_balance sheet\n",
        "# Use GausianHMM to train the model. HMM model provided below values as transition probability\n",
        "#[[0.23406671 0.76593329]\n",
        "# [0.2235027  0.7764973 ]]\n",
        "# Revised dataset for GBC model to use timeseries component\n",
        "# GradientBoostingClassifier provided improved AUC results with using timeseries data"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}